// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multithread.djinni

#import "OCMultithreadSupport+Private.h"
#import "OCMultithreadSupport.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "OCCallback+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface OCMultithreadSupportCppProxy : NSObject<OCMultithreadSupport>

- (id)initWithCpp:(const std::shared_ptr<::generated::CMultithreadSupport>&)cppRef;

@end

@implementation OCMultithreadSupportCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::generated::CMultithreadSupport>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::generated::CMultithreadSupport>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)startThread:(nonnull NSString *)name
           callback:(nullable id<OCCallback>)callback {
    try {
        _cppRefHandle.get()->start_thread(::djinni::String::toCpp(name),
                                          ::djinni_generated::CCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)executeInUi:(nullable id<OCCallback>)callback {
    try {
        _cppRefHandle.get()->execute_in_ui(::djinni_generated::CCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CMultithreadSupport::ObjcProxy final
: public ::generated::CMultithreadSupport
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::CMultithreadSupport;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void start_thread(const std::string & c_name, const std::shared_ptr<::generated::CCallback> & c_callback) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() startThread:(::djinni::String::fromCpp(c_name))
                                                         callback:(::djinni_generated::CCallback::fromCpp(c_callback))];
        }
    }
    void execute_in_ui(const std::shared_ptr<::generated::CCallback> & c_callback) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() executeInUi:(::djinni_generated::CCallback::fromCpp(c_callback))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto CMultithreadSupport::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[OCMultithreadSupportCppProxy class]]) {
        return ((OCMultithreadSupportCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CMultithreadSupport::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<OCMultithreadSupportCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
