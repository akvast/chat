// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from app.djinni

#import "OCApp+Private.h"
#import "OCApp.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "OCMultithreadSupport+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface OCApp ()

- (id)initWithCpp:(const std::shared_ptr<::generated::CApp>&)cppRef;

@end

@implementation OCApp {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::generated::CApp>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::generated::CApp>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable OCApp *)instance {
    try {
        auto objcpp_result_ = ::generated::CApp::instance();
        return ::djinni_generated::CApp::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setMultithreadSupport:(nullable id<OCMultithreadSupport>)multithreadSupport {
    try {
        _cppRefHandle.get()->set_multithread_support(::djinni_generated::CMultithreadSupport::toCpp(multithreadSupport));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)connect:(nonnull NSString *)host
           port:(int32_t)port {
    try {
        _cppRefHandle.get()->connect(::djinni::String::toCpp(host),
                                     ::djinni::I32::toCpp(port));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto CApp::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto CApp::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<OCApp>(cpp);
}

}  // namespace djinni_generated

@end
