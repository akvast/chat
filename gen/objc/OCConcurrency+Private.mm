// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from concurrency.djinni

#import "OCConcurrency+Private.h"
#import "OCConcurrency.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "OCRunnable+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface OCConcurrencyCppProxy : NSObject<OCConcurrency>

- (id)initWithCpp:(const std::shared_ptr<::generated::CConcurrency>&)cppRef;

@end

@implementation OCConcurrencyCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::generated::CConcurrency>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::generated::CConcurrency>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)startThread:(nonnull NSString *)name
           runnable:(nullable id<OCRunnable>)runnable {
    try {
        _cppRefHandle.get()->start_thread(::djinni::String::toCpp(name),
                                          ::djinni_generated::CRunnable::toCpp(runnable));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)executeInUi:(nullable id<OCRunnable>)runnable {
    try {
        _cppRefHandle.get()->execute_in_ui(::djinni_generated::CRunnable::toCpp(runnable));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CConcurrency::ObjcProxy final
: public ::generated::CConcurrency
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::CConcurrency;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void start_thread(const std::string & c_name, const std::shared_ptr<::generated::CRunnable> & c_runnable) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() startThread:(::djinni::String::fromCpp(c_name))
                                                         runnable:(::djinni_generated::CRunnable::fromCpp(c_runnable))];
        }
    }
    void execute_in_ui(const std::shared_ptr<::generated::CRunnable> & c_runnable) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() executeInUi:(::djinni_generated::CRunnable::fromCpp(c_runnable))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto CConcurrency::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[OCConcurrencyCppProxy class]]) {
        return ((OCConcurrencyCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CConcurrency::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<OCConcurrencyCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
