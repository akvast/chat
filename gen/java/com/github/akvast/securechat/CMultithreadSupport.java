// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multithread.djinni

package com.github.akvast.securechat;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CMultithreadSupport {
    public abstract void startThread(String name, CCallback callback);

    public abstract void executeInUi(CCallback callback);

    private static final class CppProxy extends CMultithreadSupport
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void startThread(String name, CCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_startThread(this.nativeRef, name, callback);
        }
        private native void native_startThread(long _nativeRef, String name, CCallback callback);

        @Override
        public void executeInUi(CCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_executeInUi(this.nativeRef, callback);
        }
        private native void native_executeInUi(long _nativeRef, CCallback callback);
    }
}
