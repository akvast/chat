// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from vm_connection.djinni

package com.github.akvast.securechat;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CConnectionViewModel {
    public abstract CViewModel getBase();

    public abstract boolean isConnected();

    public abstract boolean isConnecting();

    public abstract boolean isAuthFailed();

    public static native CConnectionViewModel instance();

    private static final class CppProxy extends CConnectionViewModel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public CViewModel getBase()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBase(this.nativeRef);
        }
        private native CViewModel native_getBase(long _nativeRef);

        @Override
        public boolean isConnected()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isConnected(this.nativeRef);
        }
        private native boolean native_isConnected(long _nativeRef);

        @Override
        public boolean isConnecting()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isConnecting(this.nativeRef);
        }
        private native boolean native_isConnecting(long _nativeRef);

        @Override
        public boolean isAuthFailed()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isAuthFailed(this.nativeRef);
        }
        private native boolean native_isAuthFailed(long _nativeRef);
    }
}
