// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from app.djinni

package com.github.akvast.securechat;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CApp {
    public abstract void setConcurrency(CConcurrency concurrency);

    public abstract void setHost(String host);

    public abstract void setPort(int port);

    public abstract void setToken(String token);

    public abstract void setName(String name);

    public abstract void setEmail(String email);

    public abstract void setAvatarUrl(String avatarUrl);

    public abstract void openDatabase(String path);

    public abstract void connect();

    public static native CApp instance();

    private static final class CppProxy extends CApp
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setConcurrency(CConcurrency concurrency)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setConcurrency(this.nativeRef, concurrency);
        }
        private native void native_setConcurrency(long _nativeRef, CConcurrency concurrency);

        @Override
        public void setHost(String host)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setHost(this.nativeRef, host);
        }
        private native void native_setHost(long _nativeRef, String host);

        @Override
        public void setPort(int port)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPort(this.nativeRef, port);
        }
        private native void native_setPort(long _nativeRef, int port);

        @Override
        public void setToken(String token)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setToken(this.nativeRef, token);
        }
        private native void native_setToken(long _nativeRef, String token);

        @Override
        public void setName(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setName(this.nativeRef, name);
        }
        private native void native_setName(long _nativeRef, String name);

        @Override
        public void setEmail(String email)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setEmail(this.nativeRef, email);
        }
        private native void native_setEmail(long _nativeRef, String email);

        @Override
        public void setAvatarUrl(String avatarUrl)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAvatarUrl(this.nativeRef, avatarUrl);
        }
        private native void native_setAvatarUrl(long _nativeRef, String avatarUrl);

        @Override
        public void openDatabase(String path)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_openDatabase(this.nativeRef, path);
        }
        private native void native_openDatabase(long _nativeRef, String path);

        @Override
        public void connect()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_connect(this.nativeRef);
        }
        private native void native_connect(long _nativeRef);
    }
}
