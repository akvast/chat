// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from common.djinni

#pragma once

#include "../cpp/CCallback.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class JCCallback final : ::djinni::JniInterface<::generated::CCallback, JCCallback> {
public:
    using CppType = std::shared_ptr<::generated::CCallback>;
    using CppOptType = std::shared_ptr<::generated::CCallback>;
    using JniType = jobject;

    using Boxed = JCCallback;

    ~JCCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<JCCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<JCCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    JCCallback();
    friend ::djinni::JniClass<JCCallback>;
    friend ::djinni::JniInterface<::generated::CCallback, JCCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::generated::CCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void execute() override;

    private:
        friend ::djinni::JniInterface<::generated::CCallback, ::djinni_generated::JCCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/akvast/securechat/CCallback") };
    const jmethodID method_execute { ::djinni::jniGetMethodID(clazz.get(), "execute", "()V") };
};

}  // namespace djinni_generated
