// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from multithread.djinni

#include "JCMultithreadSupport.hpp"  // my header
#include "JCCallback.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

JCMultithreadSupport::JCMultithreadSupport() : ::djinni::JniInterface<::generated::CMultithreadSupport, JCMultithreadSupport>("com/github/akvast/securechat/CMultithreadSupport$CppProxy") {}

JCMultithreadSupport::~JCMultithreadSupport() = default;

JCMultithreadSupport::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

JCMultithreadSupport::JavaProxy::~JavaProxy() = default;

void JCMultithreadSupport::JavaProxy::start_thread(const std::string & c_name, const std::shared_ptr<::generated::CCallback> & c_callback) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::JCMultithreadSupport>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_startThread,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni_generated::JCCallback::fromCpp(jniEnv, c_callback)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void JCMultithreadSupport::JavaProxy::execute_in_ui(const std::shared_ptr<::generated::CCallback> & c_callback) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::JCMultithreadSupport>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_executeInUi,
                           ::djinni::get(::djinni_generated::JCCallback::fromCpp(jniEnv, c_callback)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_com_github_akvast_securechat_CMultithreadSupport_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::generated::CMultithreadSupport>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_akvast_securechat_CMultithreadSupport_00024CppProxy_native_1startThread(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CMultithreadSupport>(nativeRef);
        ref->start_thread(::djinni::String::toCpp(jniEnv, j_name),
                          ::djinni_generated::JCCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_github_akvast_securechat_CMultithreadSupport_00024CppProxy_native_1executeInUi(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_callback)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CMultithreadSupport>(nativeRef);
        ref->execute_in_ui(::djinni_generated::JCCallback::toCpp(jniEnv, j_callback));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
