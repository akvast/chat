// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from common.djinni

#pragma once

#include "../cpp/CRunnable.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class JCRunnable final : ::djinni::JniInterface<::generated::CRunnable, JCRunnable> {
public:
    using CppType = std::shared_ptr<::generated::CRunnable>;
    using CppOptType = std::shared_ptr<::generated::CRunnable>;
    using JniType = jobject;

    using Boxed = JCRunnable;

    ~JCRunnable();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<JCRunnable>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<JCRunnable>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    JCRunnable();
    friend ::djinni::JniClass<JCRunnable>;
    friend ::djinni::JniInterface<::generated::CRunnable, JCRunnable>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::generated::CRunnable
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void run() override;

    private:
        friend ::djinni::JniInterface<::generated::CRunnable, ::djinni_generated::JCRunnable>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/akvast/securechat/CRunnable") };
    const jmethodID method_run { ::djinni::jniGetMethodID(clazz.get(), "run", "()V") };
};

}  // namespace djinni_generated
