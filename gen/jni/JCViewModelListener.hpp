// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from vm_base.djinni

#pragma once

#include "../cpp/CViewModelListener.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class JCViewModelListener final : ::djinni::JniInterface<::generated::CViewModelListener, JCViewModelListener> {
public:
    using CppType = std::shared_ptr<::generated::CViewModelListener>;
    using CppOptType = std::shared_ptr<::generated::CViewModelListener>;
    using JniType = jobject;

    using Boxed = JCViewModelListener;

    ~JCViewModelListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<JCViewModelListener>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<JCViewModelListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    JCViewModelListener();
    friend ::djinni::JniClass<JCViewModelListener>;
    friend ::djinni::JniInterface<::generated::CViewModelListener, JCViewModelListener>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::generated::CViewModelListener
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void on_changed() override;

    private:
        friend ::djinni::JniInterface<::generated::CViewModelListener, ::djinni_generated::JCViewModelListener>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/akvast/securechat/CViewModelListener") };
    const jmethodID method_onChanged { ::djinni::jniGetMethodID(clazz.get(), "onChanged", "()V") };
};

}  // namespace djinni_generated
