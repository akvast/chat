// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from vm_connection.djinni

#include "JCConnectionViewModel.hpp"  // my header
#include "JCViewModel.hpp"
#include "Marshal.hpp"

namespace djinni_generated {

JCConnectionViewModel::JCConnectionViewModel() : ::djinni::JniInterface<::generated::CConnectionViewModel, JCConnectionViewModel>("com/github/akvast/securechat/CConnectionViewModel$CppProxy") {}

JCConnectionViewModel::~JCConnectionViewModel() = default;


CJNIEXPORT void JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::generated::CConnectionViewModel>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_instance(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::generated::CConnectionViewModel::instance();
        return ::djinni::release(::djinni_generated::JCConnectionViewModel::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_00024CppProxy_native_1getBase(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CConnectionViewModel>(nativeRef);
        auto r = ref->get_base();
        return ::djinni::release(::djinni_generated::JCViewModel::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_00024CppProxy_native_1isConnected(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CConnectionViewModel>(nativeRef);
        auto r = ref->is_connected();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_00024CppProxy_native_1isConnecting(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CConnectionViewModel>(nativeRef);
        auto r = ref->is_connecting();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_github_akvast_securechat_CConnectionViewModel_00024CppProxy_native_1isAuthFailed(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::generated::CConnectionViewModel>(nativeRef);
        auto r = ref->is_auth_failed();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
